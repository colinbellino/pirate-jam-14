/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i media/shaders/shader_sprite.glsl -o src/shaders/shader_sprite/shader_sprite.odin -l glsl330 -f sokol_odin

    Overview:

        Shader program 'sprite':
            Get shader desc: shd.sprite_shader_desc(sg.query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
                    ATTR_vs_uv = 1
                    ATTR_vs_i_position = 2
                    ATTR_vs_i_scale = 3
                    ATTR_vs_i_color = 4
                    ATTR_vs_i_t_position = 5
                    ATTR_vs_i_t_size = 6
                    ATTR_vs_i_t_index = 7
                    ATTR_vs_i_palette = 8
                Uniform block 'vs_uniform':
                    C struct: vs_uniform_t
                    Bind slot: SLOT_vs_uniform = 0
            Fragment shader: fs
                Uniform block 'fs_uniform':
                    C struct: fs_uniform_t
                    Bind slot: SLOT_fs_uniform = 0
                Image 'texture0':
                    Image Type: ._2D
                    Sample Type: .FLOAT
                    Multisampled: false
                    Bind slot: SLOT_texture0 = 0
                Image 'texture1':
                    Image Type: ._2D
                    Sample Type: .FLOAT
                    Multisampled: false
                    Bind slot: SLOT_texture1 = 1
                Image 'texture2':
                    Image Type: ._2D
                    Sample Type: .FLOAT
                    Multisampled: false
                    Bind slot: SLOT_texture2 = 2
                Image 'texture3':
                    Image Type: ._2D
                    Sample Type: .FLOAT
                    Multisampled: false
                    Bind slot: SLOT_texture3 = 3
                Sampler 'smp':
                    Type: .FILTERING
                    Bind slot: SLOT_smp = 0
                Image Sampler Pair 'texture0_smp':
                    Image: texture0
                    Sampler: smp
                Image Sampler Pair 'texture1_smp':
                    Image: texture1
                    Sampler: smp
                Image Sampler Pair 'texture2_smp':
                    Image: texture2
                    Sampler: smp
                Image Sampler Pair 'texture3_smp':
                    Image: texture3
                    Sampler: smp

*/
package shader_sprite
import sg "../../sokol-odin/sokol/gfx"
import "../"; @(init) shader_init :: proc() { shaders.shaders["shader_sprite"] = sprite_shader_desc }
import "core:math/linalg"
ATTR_vs_position :: 0
ATTR_vs_uv :: 1
ATTR_vs_i_position :: 2
ATTR_vs_i_scale :: 3
ATTR_vs_i_color :: 4
ATTR_vs_i_t_position :: 5
ATTR_vs_i_t_size :: 6
ATTR_vs_i_t_index :: 7
ATTR_vs_i_palette :: 8
SLOT_texture0 :: 0
SLOT_texture1 :: 1
SLOT_texture2 :: 2
SLOT_texture3 :: 3
SLOT_smp :: 0
SLOT_vs_uniform :: 0
Vs_Uniform :: struct {
    mvp: linalg.Matrix4x4f32,
}
SLOT_fs_uniform :: 0
Fs_Uniform :: struct {
    palettes: [128][4]f32,
}
/*
   #version 330

   uniform vec4 vs_uniform[4];
   layout(location = 0) in vec2 position;
   layout(location = 3) in vec2 i_scale;
   layout(location = 2) in vec2 i_position;
   out vec4 f_color;
   layout(location = 4) in vec4 i_color;
   out vec2 f_uv;
   layout(location = 1) in vec2 uv;
   out vec2 f_t_position;
   layout(location = 5) in vec2 i_t_position;
   out vec2 f_t_size;
   layout(location = 6) in vec2 i_t_size;
   out float f_t_index;
   layout(location = 7) in float i_t_index;
   out float f_palette;
   layout(location = 8) in float i_palette;

   void main()
   {
       gl_Position = mat4(vs_uniform[0], vs_uniform[1], vs_uniform[2], vs_uniform[3]) * (vec4(i_position, 0.0, 1.0) + vec4(position * i_scale, 0.0, 1.0));
       f_color = i_color;
       f_uv = uv;
       f_t_position = i_t_position;
       f_t_size = i_t_size;
       f_t_index = i_t_index;
       f_palette = i_palette;
   }

*/
@(private)
vs_source_glsl330 := [833]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x5f,
    0x73,0x63,0x61,0x6c,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x69,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x69,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x5f,0x74,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x35,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x5f,0x74,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x66,0x5f,0x74,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x36,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x5f,0x74,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,
    0x74,0x5f,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x37,0x29,0x20,0x69,0x6e,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,0x5f,0x74,0x5f,0x69,0x6e,0x64,0x65,0x78,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,0x70,0x61,
    0x6c,0x65,0x74,0x74,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x38,0x29,0x20,0x69,0x6e,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x69,0x5f,0x70,0x61,0x6c,0x65,0x74,0x74,0x65,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,
    0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x33,0x5d,
    0x29,0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x34,0x28,0x69,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x2a,0x20,0x69,0x5f,0x73,0x63,0x61,0x6c,0x65,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x69,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x5f,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x5f,0x74,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x69,0x5f,0x74,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x5f,0x74,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,0x20,0x69,0x5f,0x74,
    0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x5f,0x74,0x5f,0x69,
    0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,0x69,0x5f,0x74,0x5f,0x69,0x6e,0x64,0x65,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x5f,0x70,0x61,0x6c,0x65,0x74,0x74,0x65,0x20,
    0x3d,0x20,0x69,0x5f,0x70,0x61,0x6c,0x65,0x74,0x74,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
}
/*
   #version 330

   uniform vec4 fs_uniform[128];
   uniform sampler2D texture0_smp;
   uniform sampler2D texture1_smp;
   uniform sampler2D texture2_smp;
   uniform sampler2D texture3_smp;

   in vec2 f_t_position;
   in vec2 f_t_size;
   in vec2 f_uv;
   in float f_t_index;
   layout(location = 0) out vec4 frag_color;
   in float f_palette;
   in vec4 f_color;

   void main()
   {
       vec2 _18 = f_t_size * f_uv + f_t_position;
       int _65 = int(f_t_index);
       if (_65 == 0)
       {
           frag_color = texture(texture0_smp, _18);
       }
       else
       {
           if (_65 == 1)
           {
               frag_color = texture(texture1_smp, _18);
           }
           else
           {
               if (_65 == 2)
               {
                   frag_color = texture(texture2_smp, _18);
               }
               else
               {
                   frag_color = texture(texture3_smp, _18);
               }
           }
       }
       int _113 = int(f_palette);
       float _124 = frag_color.x;
       vec4 _134 = frag_color;
       vec3 _148 = mix(_134.xyz, fs_uniform[(int(_124 * 255.0) + ((_113 - 1) * 32)) * 1 + 0].xyz, vec3(float(clamp(_113, 0, 1))));
       frag_color.x = _148.x;
       frag_color.y = _148.y;
       frag_color.z = _148.z;
       frag_color *= f_color;
   }

*/
@(private)
fs_source_glsl330 := [1189]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x32,0x38,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x30,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x31,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x32,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x33,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x66,0x5f,0x74,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x5f,0x74,0x5f,0x73,
    0x69,0x7a,0x65,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x5f,0x75,
    0x76,0x3b,0x0a,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,0x74,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,0x70,0x61,0x6c,0x65,
    0x74,0x74,0x65,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,
    0x38,0x20,0x3d,0x20,0x66,0x5f,0x74,0x5f,0x73,0x69,0x7a,0x65,0x20,0x2a,0x20,0x66,
    0x5f,0x75,0x76,0x20,0x2b,0x20,0x66,0x5f,0x74,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x36,0x35,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x5f,0x74,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x36,0x35,0x20,0x3d,0x3d,
    0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x30,0x5f,
    0x73,0x6d,0x70,0x2c,0x20,0x5f,0x31,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x36,0x35,0x20,
    0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x31,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x5f,
    0x31,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x36,0x35,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x5f,0x73,0x6d,0x70,0x2c,
    0x20,0x5f,0x31,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x33,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x5f,0x31,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x5f,0x31,0x31,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x5f,
    0x70,0x61,0x6c,0x65,0x74,0x74,0x65,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x34,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x33,0x34,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,
    0x34,0x38,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x31,0x33,0x34,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x66,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x28,0x69,
    0x6e,0x74,0x28,0x5f,0x31,0x32,0x34,0x20,0x2a,0x20,0x32,0x35,0x35,0x2e,0x30,0x29,
    0x20,0x2b,0x20,0x28,0x28,0x5f,0x31,0x31,0x33,0x20,0x2d,0x20,0x31,0x29,0x20,0x2a,
    0x20,0x33,0x32,0x29,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x31,0x33,0x2c,0x20,0x30,0x2c,0x20,0x31,0x29,
    0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x34,0x38,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,
    0x20,0x3d,0x20,0x5f,0x31,0x34,0x38,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,
    0x34,0x38,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x3d,0x20,0x66,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
}
sprite_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    #partial switch backend {
        case .GLCORE33: {
            desc.attrs[0].name = "position"
            desc.attrs[1].name = "uv"
            desc.attrs[2].name = "i_position"
            desc.attrs[3].name = "i_scale"
            desc.attrs[4].name = "i_color"
            desc.attrs[5].name = "i_t_position"
            desc.attrs[6].name = "i_t_size"
            desc.attrs[7].name = "i_t_index"
            desc.attrs[8].name = "i_palette"
            desc.vs.source = transmute(cstring)&vs_source_glsl330
            desc.vs.entry = "main"
            desc.vs.uniform_blocks[0].size = 64
            desc.vs.uniform_blocks[0].layout = .STD140
            desc.vs.uniform_blocks[0].uniforms[0].name = "vs_uniform"
            desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 4
            desc.fs.source = transmute(cstring)&fs_source_glsl330
            desc.fs.entry = "main"
            desc.fs.uniform_blocks[0].size = 2048
            desc.fs.uniform_blocks[0].layout = .STD140
            desc.fs.uniform_blocks[0].uniforms[0].name = "fs_uniform"
            desc.fs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 128
            desc.fs.images[0].used = true
            desc.fs.images[0].multisampled = false
            desc.fs.images[0].image_type = ._2D
            desc.fs.images[0].sample_type = .FLOAT
            desc.fs.images[1].used = true
            desc.fs.images[1].multisampled = false
            desc.fs.images[1].image_type = ._2D
            desc.fs.images[1].sample_type = .FLOAT
            desc.fs.images[2].used = true
            desc.fs.images[2].multisampled = false
            desc.fs.images[2].image_type = ._2D
            desc.fs.images[2].sample_type = .FLOAT
            desc.fs.images[3].used = true
            desc.fs.images[3].multisampled = false
            desc.fs.images[3].image_type = ._2D
            desc.fs.images[3].sample_type = .FLOAT
            desc.fs.samplers[0].used = true
            desc.fs.samplers[0].sampler_type = .FILTERING
            desc.fs.image_sampler_pairs[0].used = true
            desc.fs.image_sampler_pairs[0].image_slot = 0
            desc.fs.image_sampler_pairs[0].sampler_slot = 0
            desc.fs.image_sampler_pairs[0].glsl_name = "texture0_smp"
            desc.fs.image_sampler_pairs[1].used = true
            desc.fs.image_sampler_pairs[1].image_slot = 1
            desc.fs.image_sampler_pairs[1].sampler_slot = 0
            desc.fs.image_sampler_pairs[1].glsl_name = "texture1_smp"
            desc.fs.image_sampler_pairs[2].used = true
            desc.fs.image_sampler_pairs[2].image_slot = 2
            desc.fs.image_sampler_pairs[2].sampler_slot = 0
            desc.fs.image_sampler_pairs[2].glsl_name = "texture2_smp"
            desc.fs.image_sampler_pairs[3].used = true
            desc.fs.image_sampler_pairs[3].image_slot = 3
            desc.fs.image_sampler_pairs[3].sampler_slot = 0
            desc.fs.image_sampler_pairs[3].glsl_name = "texture3_smp"
            desc.label = "sprite_shader"
        }
    }
    return desc
}
