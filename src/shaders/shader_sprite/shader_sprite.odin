/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i media/shaders_new/shader_sprite.glsl -o src/shaders/shader_sprite/shader_sprite.odin -l glsl330 -f sokol_odin

    Overview:

        Shader program 'sprite':
            Get shader desc: shd.sprite_shader_desc(sg.query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_pos = 0
                    ATTR_vs_inst_pos = 1
                    ATTR_vs_inst_color = 2
                Uniform block 'vs_uniform':
                    C struct: vs_uniform_t
                    Bind slot: SLOT_vs_uniform = 0
            Fragment shader: fs

*/
package shader_quad
import sg "../../sokol-odin/sokol/gfx"
ATTR_vs_pos :: 0
ATTR_vs_inst_pos :: 1
ATTR_vs_inst_color :: 2
SLOT_vs_uniform :: 0
Vs_Uniform :: struct {
    projection: [16]f32,
    view: [16]f32,
    model: [16]f32,
}
/*
   #version 330
   
   uniform vec4 vs_uniform[12];
   layout(location = 1) in vec2 inst_pos;
   layout(location = 0) in vec2 pos;
   out vec4 color;
   layout(location = 2) in vec4 inst_color;
   
   void main()
   {
       gl_Position = ((mat4(vs_uniform[0], vs_uniform[1], vs_uniform[2], vs_uniform[3]) * mat4(vs_uniform[4], vs_uniform[5], vs_uniform[6], vs_uniform[7])) * mat4(vs_uniform[8], vs_uniform[9], vs_uniform[10], vs_uniform[11])) * vec4(inst_pos + pos, 0.0, 1.0);
       color = inst_color;
   }
   
*/
@(private)
vs_source_glsl330 := [473]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x6e,0x73,0x74,0x5f,0x70,0x6f,0x73,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,
    0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,
    0x20,0x69,0x6e,0x73,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x33,0x5d,0x29,
    0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,
    0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x38,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x5b,0x39,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x5b,0x31,0x31,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x69,0x6e,0x73,0x74,0x5f,0x70,0x6f,0x73,0x20,0x2b,0x20,0x70,0x6f,0x73,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,0x73,0x74,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
/*
   #version 330
   
   layout(location = 0) out vec4 frag_color;
   in vec4 color;
   
   void main()
   {
       frag_color = color;
   }
   
*/
@(private)
fs_source_glsl330 := [114]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
}
sprite_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    #partial switch backend {
        case .GLCORE33: {
            desc.attrs[0].name = "pos"
            desc.attrs[1].name = "inst_pos"
            desc.attrs[2].name = "inst_color"
            desc.vs.source = transmute(cstring)&vs_source_glsl330
            desc.vs.entry = "main"
            desc.vs.uniform_blocks[0].size = 192
            desc.vs.uniform_blocks[0].layout = .STD140
            desc.vs.uniform_blocks[0].uniforms[0].name = "vs_uniform"
            desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 12
            desc.fs.source = transmute(cstring)&fs_source_glsl330
            desc.fs.entry = "main"
            desc.label = "sprite_shader"
        }
    }
    return desc
}
