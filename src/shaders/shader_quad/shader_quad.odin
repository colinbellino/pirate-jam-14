/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i media/shaders_new/shader_quad.glsl -o src/shaders/shader_quad/shader_quad.odin -l glsl330 -f sokol_odin

    Overview:

        Shader program 'quad':
            Get shader desc: shd.quad_shader_desc(sg.query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_pos = 0
                    ATTR_vs_inst_pos = 1
                    ATTR_vs_inst_color = 2
            Fragment shader: fs
                Image 'tex':
                    Image Type: ._2D
                    Sample Type: .FLOAT
                    Multisampled: false
                    Bind slot: SLOT_tex = 0
                Sampler 'smp':
                    Type: .FILTERING
                    Bind slot: SLOT_smp = 0
                Image Sampler Pair 'tex_smp':
                    Image: tex
                    Sampler: smp

*/
package shader_quad
import sg "../../sokol-odin/sokol/gfx"
ATTR_vs_pos :: 0
ATTR_vs_inst_pos :: 1
ATTR_vs_inst_color :: 2
SLOT_tex :: 0
SLOT_smp :: 0
/*
   #version 330
   
   layout(location = 0) in vec2 pos;
   layout(location = 1) in vec2 inst_pos;
   out vec4 color;
   layout(location = 2) in vec4 inst_color;
   out vec2 uv;
   
   void main()
   {
       gl_Position = vec4(pos + (inst_pos * 0.001000000047497451305389404296875), 0.0, 1.0);
       color = inst_color;
       uv = (pos - vec2(0.0500000007450580596923828125)) * vec2(-10.0);
   }
   
*/
@(private)
vs_source_glsl330 := [359]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x6e,0x73,
    0x74,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x69,0x6e,0x73,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x73,0x20,0x2b,0x20,0x28,0x69,0x6e,0x73,0x74,0x5f,0x70,
    0x6f,0x73,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,
    0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,0x31,0x33,0x30,0x35,0x33,0x38,0x39,0x34,
    0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x69,0x6e,0x73,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x28,0x70,0x6f,0x73,0x20,0x2d,0x20,0x76,0x65,
    0x63,0x32,0x28,0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x34,
    0x35,0x30,0x35,0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,0x31,0x32,
    0x35,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
/*
   #version 330
   
   uniform sampler2D tex_smp;
   
   layout(location = 0) out vec4 frag_color;
   in vec2 uv;
   in vec4 color;
   
   void main()
   {
       frag_color = texture(tex_smp, uv) * color;
   }
   
*/
@(private)
fs_source_glsl330 := [177]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,
    0x75,0x76,0x29,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
}
quad_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    #partial switch backend {
        case .GLCORE33: {
            desc.attrs[0].name = "pos"
            desc.attrs[1].name = "inst_pos"
            desc.attrs[2].name = "inst_color"
            desc.vs.source = transmute(cstring)&vs_source_glsl330
            desc.vs.entry = "main"
            desc.fs.source = transmute(cstring)&fs_source_glsl330
            desc.fs.entry = "main"
            desc.fs.images[0].used = true
            desc.fs.images[0].multisampled = false
            desc.fs.images[0].image_type = ._2D
            desc.fs.images[0].sample_type = .FLOAT
            desc.fs.samplers[0].used = true
            desc.fs.samplers[0].sampler_type = .FILTERING
            desc.fs.image_sampler_pairs[0].used = true
            desc.fs.image_sampler_pairs[0].image_slot = 0
            desc.fs.image_sampler_pairs[0].sampler_slot = 0
            desc.fs.image_sampler_pairs[0].glsl_name = "tex_smp"
            desc.label = "quad_shader"
        }
    }
    return desc
}
