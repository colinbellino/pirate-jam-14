/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i media/shaders/shader_line.glsl -o src/shaders/shader_line/shader_line.odin -l glsl330 -f sokol_odin

    Overview:

        Shader program 'line':
            Get shader desc: shd.line_shader_desc(sg.query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
            Fragment shader: fs
                Uniform block 'fs_uniform':
                    C struct: fs_uniform_t
                    Bind slot: SLOT_fs_uniform = 0

*/
package shader_line
import sg "../../sokol-odin/sokol/gfx"
import "../"; @(init) shader_init :: proc() { shaders.shaders["shader_line"] = line_shader_desc }
import "core:math/linalg"
ATTR_vs_position :: 0
SLOT_fs_uniform :: 0
Fs_Uniform :: struct {
    mvp: linalg.Matrix4x4f32,
    points_color: linalg.Vector4f32,
    lines_color: linalg.Vector4f32,
    points: [128]linalg.Vector4f32,
    points_count: i32,
    lines_thickness: f32,
    time: f32,
    points_radius: f32,
    window_size: linalg.Vector2f32,
    _: [8]u8,
}
/*
   #version 330
   
   layout(location = 0) in vec2 position;
   
   void main()
   {
       gl_Position = vec4(position, 0.0, 1.0);
   }
   
*/
@(private)
vs_source_glsl330 := [116]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
}
/*
   #version 330
   
   struct fs_uniform
   {
       mat4 mvp;
       vec4 points_color;
       vec4 lines_color;
       vec4 points[128];
       int points_count;
       float lines_thickness;
       float time;
       float points_radius;
       vec2 window_size;
   };
   
   uniform fs_uniform _28;
   
   layout(location = 0) out vec4 frag_color;
   
   vec2 world_to_clip_position(vec4 point)
   {
       return (((_28.mvp * point).xy + vec2(1.0)) * vec2(0.5)) * _28.window_size;
   }
   
   float manhattan_distance(vec2 a, vec2 b)
   {
       return abs(a.x - b.x) + abs(a.y - b.y);
   }
   
   void main()
   {
       frag_color = vec4(0.0);
       for (int i = 1; i < _28.points_count; i++)
       {
           vec4 param = _28.points[i - 1];
           vec2 _103 = world_to_clip_position(param);
           vec4 param_1 = _28.points[i];
           vec2 _109 = world_to_clip_position(param_1);
           float _117 = (5000.0 * _28.points_radius) * _28.mvp[0].x;
           vec2 param_2 = gl_FragCoord.xy;
           vec2 param_3 = _103;
           if (manhattan_distance(param_2, param_3) < _117)
           {
               frag_color = _28.points_color;
               frag_color.w = 1.0;
               return;
           }
           vec2 param_4 = gl_FragCoord.xy;
           vec2 param_5 = _109;
           if (manhattan_distance(param_4, param_5) < _117)
           {
               frag_color = _28.points_color;
               frag_color.w = 1.0;
               return;
           }
           vec2 _154 = _109 - _103;
           float _164 = length(_154);
           vec2 _172 = _103 + (normalize(_154) * (dot(_154, gl_FragCoord.xy - _103) / _164));
           bool _185 = length(_172 - gl_FragCoord.xy) < ((5000.0 * _28.lines_thickness) * _28.mvp[0].x);
           bool _195;
           if (_185)
           {
               _195 = length(_172 - _103) <= _164;
           }
           else
           {
               _195 = _185;
           }
           bool _205;
           if (_195)
           {
               _205 = length(_172 - _109) <= _164;
           }
           else
           {
               _205 = _195;
           }
           if (_205)
           {
               frag_color = _28.lines_color;
           }
       }
   }
   
*/
@(private)
fs_source_glsl330 := [2015]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x66,0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x76,0x70,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x6c,0x69,0x6e,0x65,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5b,0x31,0x32,0x38,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x6f,0x69,0x6e,0x74,
    0x73,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x73,0x5f,0x74,0x68,0x69,0x63,0x6b,0x6e,0x65,
    0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x69,
    0x6d,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x6f,
    0x69,0x6e,0x74,0x73,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x32,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x5f,0x73,0x69,0x7a,
    0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x66,
    0x73,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x5f,0x32,0x38,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,
    0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x69,0x6e,
    0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x28,0x28,0x28,0x5f,0x32,0x38,0x2e,0x6d,0x76,0x70,0x20,0x2a,0x20,0x70,0x6f,0x69,
    0x6e,0x74,0x29,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x29,
    0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x77,0x69,0x6e,0x64,0x6f,0x77,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x61,0x6e,
    0x68,0x61,0x74,0x74,0x61,0x6e,0x5f,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x28,
    0x76,0x65,0x63,0x32,0x20,0x61,0x2c,0x20,0x76,0x65,0x63,0x32,0x20,0x62,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x61,0x62,0x73,
    0x28,0x61,0x2e,0x78,0x20,0x2d,0x20,0x62,0x2e,0x78,0x29,0x20,0x2b,0x20,0x61,0x62,
    0x73,0x28,0x61,0x2e,0x79,0x20,0x2d,0x20,0x62,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x31,0x3b,0x20,0x69,
    0x20,0x3c,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5f,0x63,0x6f,
    0x75,0x6e,0x74,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x20,0x3d,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5b,
    0x69,0x20,0x2d,0x20,0x31,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x33,0x20,0x3d,0x20,0x77,0x6f,0x72,0x6c,
    0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,
    0x3d,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5b,0x69,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,
    0x30,0x39,0x20,0x3d,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,
    0x69,0x70,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x28,0x35,0x30,0x30,0x30,
    0x2e,0x30,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,0x69,0x6e,0x74,0x73,0x5f,
    0x72,0x61,0x64,0x69,0x75,0x73,0x29,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x6d,0x76,
    0x70,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x31,0x30,0x33,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6d,0x61,0x6e,0x68,0x61,0x74,0x74,
    0x61,0x6e,0x5f,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x3c,0x20,
    0x5f,0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,0x69,
    0x6e,0x74,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x77,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6d,0x61,0x6e,0x68,0x61,0x74,
    0x74,0x61,0x6e,0x5f,0x64,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x20,0x3c,
    0x20,0x5f,0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x38,0x2e,0x70,0x6f,
    0x69,0x6e,0x74,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x77,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x5f,0x31,
    0x30,0x39,0x20,0x2d,0x20,0x5f,0x31,0x30,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x36,0x34,0x20,0x3d,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x37,0x32,0x20,
    0x3d,0x20,0x5f,0x31,0x30,0x33,0x20,0x2b,0x20,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x28,0x64,0x6f,0x74,
    0x28,0x5f,0x31,0x35,0x34,0x2c,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2d,0x20,0x5f,0x31,0x30,0x33,0x29,0x20,0x2f,
    0x20,0x5f,0x31,0x36,0x34,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x38,0x35,0x20,0x3d,0x20,0x6c,0x65,0x6e,
    0x67,0x74,0x68,0x28,0x5f,0x31,0x37,0x32,0x20,0x2d,0x20,0x67,0x6c,0x5f,0x46,0x72,
    0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x29,0x20,0x3c,0x20,0x28,0x28,
    0x35,0x30,0x30,0x30,0x2e,0x30,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x6c,0x69,0x6e,
    0x65,0x73,0x5f,0x74,0x68,0x69,0x63,0x6b,0x6e,0x65,0x73,0x73,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x38,0x2e,0x6d,0x76,0x70,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x39,0x35,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,
    0x38,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x39,0x35,0x20,0x3d,
    0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x37,0x32,0x20,0x2d,0x20,0x5f,
    0x31,0x30,0x33,0x29,0x20,0x3c,0x3d,0x20,0x5f,0x31,0x36,0x34,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x39,0x35,0x20,
    0x3d,0x20,0x5f,0x31,0x38,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,
    0x32,0x30,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x39,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,
    0x35,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x37,0x32,0x20,
    0x2d,0x20,0x5f,0x31,0x30,0x39,0x29,0x20,0x3c,0x3d,0x20,0x5f,0x31,0x36,0x34,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,
    0x30,0x35,0x20,0x3d,0x20,0x5f,0x31,0x39,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x32,0x30,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x38,0x2e,0x6c,0x69,
    0x6e,0x65,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
}
line_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    #partial switch backend {
        case .GLCORE33: {
            desc.attrs[0].name = "position"
            desc.vs.source = transmute(cstring)&vs_source_glsl330
            desc.vs.entry = "main"
            desc.fs.source = transmute(cstring)&fs_source_glsl330
            desc.fs.entry = "main"
            desc.fs.uniform_blocks[0].size = 2176
            desc.fs.uniform_blocks[0].layout = .STD140
            desc.fs.uniform_blocks[0].uniforms[0].name = "_28.mvp"
            desc.fs.uniform_blocks[0].uniforms[0].type = .MAT4
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[1].name = "_28.points_color"
            desc.fs.uniform_blocks[0].uniforms[1].type = .FLOAT4
            desc.fs.uniform_blocks[0].uniforms[1].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[2].name = "_28.lines_color"
            desc.fs.uniform_blocks[0].uniforms[2].type = .FLOAT4
            desc.fs.uniform_blocks[0].uniforms[2].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[3].name = "_28.points"
            desc.fs.uniform_blocks[0].uniforms[3].type = .FLOAT4
            desc.fs.uniform_blocks[0].uniforms[3].array_count = 128
            desc.fs.uniform_blocks[0].uniforms[4].name = "_28.points_count"
            desc.fs.uniform_blocks[0].uniforms[4].type = .INT
            desc.fs.uniform_blocks[0].uniforms[4].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[5].name = "_28.lines_thickness"
            desc.fs.uniform_blocks[0].uniforms[5].type = .FLOAT
            desc.fs.uniform_blocks[0].uniforms[5].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[6].name = "_28.time"
            desc.fs.uniform_blocks[0].uniforms[6].type = .FLOAT
            desc.fs.uniform_blocks[0].uniforms[6].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[7].name = "_28.points_radius"
            desc.fs.uniform_blocks[0].uniforms[7].type = .FLOAT
            desc.fs.uniform_blocks[0].uniforms[7].array_count = 1
            desc.fs.uniform_blocks[0].uniforms[8].name = "_28.window_size"
            desc.fs.uniform_blocks[0].uniforms[8].type = .FLOAT2
            desc.fs.uniform_blocks[0].uniforms[8].array_count = 1
            desc.label = "line_shader"
        }
    }
    return desc
}
